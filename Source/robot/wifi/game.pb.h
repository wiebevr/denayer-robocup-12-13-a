// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef PROTOBUF_game_2eproto__INCLUDED
#define PROTOBUF_game_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_2eproto();
void protobuf_AssignDesc_game_2eproto();
void protobuf_ShutdownFile_game_2eproto();

class Player;
class Ball;
class Goal;
class Game;

// ===================================================================

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float rotate_x = 3;
  inline bool has_rotate_x() const;
  inline void clear_rotate_x();
  static const int kRotateXFieldNumber = 3;
  inline float rotate_x() const;
  inline void set_rotate_x(float value);

  // required float rotate_y = 4;
  inline bool has_rotate_y() const;
  inline void clear_rotate_y();
  static const int kRotateYFieldNumber = 4;
  inline float rotate_y() const;
  inline void set_rotate_y(float value);

  // @@protoc_insertion_point(class_scope:Player)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_rotate_x();
  inline void clear_has_rotate_x();
  inline void set_has_rotate_y();
  inline void clear_has_rotate_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float rotate_x_;
  float rotate_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();

  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// -------------------------------------------------------------------

class Ball : public ::google::protobuf::Message {
 public:
  Ball();
  virtual ~Ball();

  Ball(const Ball& from);

  inline Ball& operator=(const Ball& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ball& default_instance();

  void Swap(Ball* other);

  // implements Message ----------------------------------------------

  Ball* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ball& from);
  void MergeFrom(const Ball& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:Ball)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();

  void InitAsDefaultInstance();
  static Ball* default_instance_;
};
// -------------------------------------------------------------------

class Goal : public ::google::protobuf::Message {
 public:
  Goal();
  virtual ~Goal();

  Goal(const Goal& from);

  inline Goal& operator=(const Goal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Goal& default_instance();

  void Swap(Goal* other);

  // implements Message ----------------------------------------------

  Goal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Goal& from);
  void MergeFrom(const Goal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float pole1_x = 1;
  inline bool has_pole1_x() const;
  inline void clear_pole1_x();
  static const int kPole1XFieldNumber = 1;
  inline float pole1_x() const;
  inline void set_pole1_x(float value);

  // required float pole1_y = 2;
  inline bool has_pole1_y() const;
  inline void clear_pole1_y();
  static const int kPole1YFieldNumber = 2;
  inline float pole1_y() const;
  inline void set_pole1_y(float value);

  // required float pole2_x = 3;
  inline bool has_pole2_x() const;
  inline void clear_pole2_x();
  static const int kPole2XFieldNumber = 3;
  inline float pole2_x() const;
  inline void set_pole2_x(float value);

  // required float pole2_y = 4;
  inline bool has_pole2_y() const;
  inline void clear_pole2_y();
  static const int kPole2YFieldNumber = 4;
  inline float pole2_y() const;
  inline void set_pole2_y(float value);

  // @@protoc_insertion_point(class_scope:Goal)
 private:
  inline void set_has_pole1_x();
  inline void clear_has_pole1_x();
  inline void set_has_pole1_y();
  inline void clear_has_pole1_y();
  inline void set_has_pole2_x();
  inline void clear_has_pole2_x();
  inline void set_has_pole2_y();
  inline void clear_has_pole2_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float pole1_x_;
  float pole1_y_;
  float pole2_x_;
  float pole2_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();

  void InitAsDefaultInstance();
  static Goal* default_instance_;
};
// -------------------------------------------------------------------

class Game : public ::google::protobuf::Message {
 public:
  Game();
  virtual ~Game();

  Game(const Game& from);

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game& default_instance();

  void Swap(Game* other);

  // implements Message ----------------------------------------------

  Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Player player_a = 1;
  inline bool has_player_a() const;
  inline void clear_player_a();
  static const int kPlayerAFieldNumber = 1;
  inline const ::Player& player_a() const;
  inline ::Player* mutable_player_a();
  inline ::Player* release_player_a();
  inline void set_allocated_player_a(::Player* player_a);

  // required .Player player_b = 2;
  inline bool has_player_b() const;
  inline void clear_player_b();
  static const int kPlayerBFieldNumber = 2;
  inline const ::Player& player_b() const;
  inline ::Player* mutable_player_b();
  inline ::Player* release_player_b();
  inline void set_allocated_player_b(::Player* player_b);

  // required .Ball ball = 3;
  inline bool has_ball() const;
  inline void clear_ball();
  static const int kBallFieldNumber = 3;
  inline const ::Ball& ball() const;
  inline ::Ball* mutable_ball();
  inline ::Ball* release_ball();
  inline void set_allocated_ball(::Ball* ball);

  // required .Goal goal = 4;
  inline bool has_goal() const;
  inline void clear_goal();
  static const int kGoalFieldNumber = 4;
  inline const ::Goal& goal() const;
  inline ::Goal* mutable_goal();
  inline ::Goal* release_goal();
  inline void set_allocated_goal(::Goal* goal);

  // @@protoc_insertion_point(class_scope:Game)
 private:
  inline void set_has_player_a();
  inline void clear_has_player_a();
  inline void set_has_player_b();
  inline void clear_has_player_b();
  inline void set_has_ball();
  inline void clear_has_ball();
  inline void set_has_goal();
  inline void clear_has_goal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Player* player_a_;
  ::Player* player_b_;
  ::Ball* ball_;
  ::Goal* goal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();

  void InitAsDefaultInstance();
  static Game* default_instance_;
};
// ===================================================================


// ===================================================================

// Player

// required float x = 1;
inline bool Player::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Player::x() const {
  return x_;
}
inline void Player::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Player::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Player::y() const {
  return y_;
}
inline void Player::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float rotate_x = 3;
inline bool Player::has_rotate_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_rotate_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_rotate_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_rotate_x() {
  rotate_x_ = 0;
  clear_has_rotate_x();
}
inline float Player::rotate_x() const {
  return rotate_x_;
}
inline void Player::set_rotate_x(float value) {
  set_has_rotate_x();
  rotate_x_ = value;
}

// required float rotate_y = 4;
inline bool Player::has_rotate_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_rotate_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_rotate_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_rotate_y() {
  rotate_y_ = 0;
  clear_has_rotate_y();
}
inline float Player::rotate_y() const {
  return rotate_y_;
}
inline void Player::set_rotate_y(float value) {
  set_has_rotate_y();
  rotate_y_ = value;
}

// -------------------------------------------------------------------

// Ball

// required float x = 1;
inline bool Ball::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ball::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ball::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ball::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Ball::x() const {
  return x_;
}
inline void Ball::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Ball::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ball::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ball::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ball::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Ball::y() const {
  return y_;
}
inline void Ball::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Goal

// required float pole1_x = 1;
inline bool Goal::has_pole1_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Goal::set_has_pole1_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Goal::clear_has_pole1_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Goal::clear_pole1_x() {
  pole1_x_ = 0;
  clear_has_pole1_x();
}
inline float Goal::pole1_x() const {
  return pole1_x_;
}
inline void Goal::set_pole1_x(float value) {
  set_has_pole1_x();
  pole1_x_ = value;
}

// required float pole1_y = 2;
inline bool Goal::has_pole1_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Goal::set_has_pole1_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Goal::clear_has_pole1_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Goal::clear_pole1_y() {
  pole1_y_ = 0;
  clear_has_pole1_y();
}
inline float Goal::pole1_y() const {
  return pole1_y_;
}
inline void Goal::set_pole1_y(float value) {
  set_has_pole1_y();
  pole1_y_ = value;
}

// required float pole2_x = 3;
inline bool Goal::has_pole2_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Goal::set_has_pole2_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Goal::clear_has_pole2_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Goal::clear_pole2_x() {
  pole2_x_ = 0;
  clear_has_pole2_x();
}
inline float Goal::pole2_x() const {
  return pole2_x_;
}
inline void Goal::set_pole2_x(float value) {
  set_has_pole2_x();
  pole2_x_ = value;
}

// required float pole2_y = 4;
inline bool Goal::has_pole2_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Goal::set_has_pole2_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Goal::clear_has_pole2_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Goal::clear_pole2_y() {
  pole2_y_ = 0;
  clear_has_pole2_y();
}
inline float Goal::pole2_y() const {
  return pole2_y_;
}
inline void Goal::set_pole2_y(float value) {
  set_has_pole2_y();
  pole2_y_ = value;
}

// -------------------------------------------------------------------

// Game

// required .Player player_a = 1;
inline bool Game::has_player_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game::set_has_player_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game::clear_has_player_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game::clear_player_a() {
  if (player_a_ != NULL) player_a_->::Player::Clear();
  clear_has_player_a();
}
inline const ::Player& Game::player_a() const {
  return player_a_ != NULL ? *player_a_ : *default_instance_->player_a_;
}
inline ::Player* Game::mutable_player_a() {
  set_has_player_a();
  if (player_a_ == NULL) player_a_ = new ::Player;
  return player_a_;
}
inline ::Player* Game::release_player_a() {
  clear_has_player_a();
  ::Player* temp = player_a_;
  player_a_ = NULL;
  return temp;
}
inline void Game::set_allocated_player_a(::Player* player_a) {
  delete player_a_;
  player_a_ = player_a;
  if (player_a) {
    set_has_player_a();
  } else {
    clear_has_player_a();
  }
}

// required .Player player_b = 2;
inline bool Game::has_player_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game::set_has_player_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game::clear_has_player_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game::clear_player_b() {
  if (player_b_ != NULL) player_b_->::Player::Clear();
  clear_has_player_b();
}
inline const ::Player& Game::player_b() const {
  return player_b_ != NULL ? *player_b_ : *default_instance_->player_b_;
}
inline ::Player* Game::mutable_player_b() {
  set_has_player_b();
  if (player_b_ == NULL) player_b_ = new ::Player;
  return player_b_;
}
inline ::Player* Game::release_player_b() {
  clear_has_player_b();
  ::Player* temp = player_b_;
  player_b_ = NULL;
  return temp;
}
inline void Game::set_allocated_player_b(::Player* player_b) {
  delete player_b_;
  player_b_ = player_b;
  if (player_b) {
    set_has_player_b();
  } else {
    clear_has_player_b();
  }
}

// required .Ball ball = 3;
inline bool Game::has_ball() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Game::set_has_ball() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Game::clear_has_ball() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Game::clear_ball() {
  if (ball_ != NULL) ball_->::Ball::Clear();
  clear_has_ball();
}
inline const ::Ball& Game::ball() const {
  return ball_ != NULL ? *ball_ : *default_instance_->ball_;
}
inline ::Ball* Game::mutable_ball() {
  set_has_ball();
  if (ball_ == NULL) ball_ = new ::Ball;
  return ball_;
}
inline ::Ball* Game::release_ball() {
  clear_has_ball();
  ::Ball* temp = ball_;
  ball_ = NULL;
  return temp;
}
inline void Game::set_allocated_ball(::Ball* ball) {
  delete ball_;
  ball_ = ball;
  if (ball) {
    set_has_ball();
  } else {
    clear_has_ball();
  }
}

// required .Goal goal = 4;
inline bool Game::has_goal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Game::set_has_goal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Game::clear_has_goal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Game::clear_goal() {
  if (goal_ != NULL) goal_->::Goal::Clear();
  clear_has_goal();
}
inline const ::Goal& Game::goal() const {
  return goal_ != NULL ? *goal_ : *default_instance_->goal_;
}
inline ::Goal* Game::mutable_goal() {
  set_has_goal();
  if (goal_ == NULL) goal_ = new ::Goal;
  return goal_;
}
inline ::Goal* Game::release_goal() {
  clear_has_goal();
  ::Goal* temp = goal_;
  goal_ = NULL;
  return temp;
}
inline void Game::set_allocated_goal(::Goal* goal) {
  delete goal_;
  goal_ = goal;
  if (goal) {
    set_has_goal();
  } else {
    clear_has_goal();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_2eproto__INCLUDED
