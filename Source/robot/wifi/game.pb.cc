// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_2eproto() {
  protobuf_AddDesc_game_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game.proto");
  GOOGLE_CHECK(file != NULL);
  Game_descriptor_ = file->message_type(0);
  static const int Game_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player_a_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player_a_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player_a_rotate_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player_a_rotate_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player_b_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player_b_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player_b_rotate_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, player_b_rotate_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, ball_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, ball_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, pole1_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, pole1_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, pole2_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, pole2_y_),
  };
  Game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game_descriptor_,
      Game::default_instance_,
      Game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game_descriptor_, &Game::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_2eproto() {
  delete Game::default_instance_;
  delete Game_reflection_;
}

void protobuf_AddDesc_game_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngame.proto\"\246\002\n\004Game\022\022\n\nplayer_a_x\030\001 \002("
    "\002\022\022\n\nplayer_a_y\030\002 \002(\002\022\031\n\021player_a_rotate"
    "_x\030\003 \002(\002\022\031\n\021player_a_rotate_y\030\004 \002(\002\022\022\n\np"
    "layer_b_x\030\005 \002(\002\022\022\n\nplayer_b_y\030\006 \002(\002\022\031\n\021p"
    "layer_b_rotate_x\030\007 \002(\002\022\031\n\021player_b_rotat"
    "e_y\030\010 \002(\002\022\016\n\006ball_x\030\t \002(\002\022\016\n\006ball_y\030\n \002("
    "\002\022\017\n\007pole1_x\030\013 \002(\002\022\017\n\007pole1_y\030\014 \002(\002\022\017\n\007p"
    "ole2_x\030\r \002(\002\022\017\n\007pole2_y\030\016 \002(\002", 309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game.proto", &protobuf_RegisterTypes);
  Game::default_instance_ = new Game();
  Game::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_2eproto {
  StaticDescriptorInitializer_game_2eproto() {
    protobuf_AddDesc_game_2eproto();
  }
} static_descriptor_initializer_game_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Game::kPlayerAXFieldNumber;
const int Game::kPlayerAYFieldNumber;
const int Game::kPlayerARotateXFieldNumber;
const int Game::kPlayerARotateYFieldNumber;
const int Game::kPlayerBXFieldNumber;
const int Game::kPlayerBYFieldNumber;
const int Game::kPlayerBRotateXFieldNumber;
const int Game::kPlayerBRotateYFieldNumber;
const int Game::kBallXFieldNumber;
const int Game::kBallYFieldNumber;
const int Game::kPole1XFieldNumber;
const int Game::kPole1YFieldNumber;
const int Game::kPole2XFieldNumber;
const int Game::kPole2YFieldNumber;
#endif  // !_MSC_VER

Game::Game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game::InitAsDefaultInstance() {
}

Game::Game(const Game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game::SharedCtor() {
  _cached_size_ = 0;
  player_a_x_ = 0;
  player_a_y_ = 0;
  player_a_rotate_x_ = 0;
  player_a_rotate_y_ = 0;
  player_b_x_ = 0;
  player_b_y_ = 0;
  player_b_rotate_x_ = 0;
  player_b_rotate_y_ = 0;
  ball_x_ = 0;
  ball_y_ = 0;
  pole1_x_ = 0;
  pole1_y_ = 0;
  pole2_x_ = 0;
  pole2_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game::~Game() {
  SharedDtor();
}

void Game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game_descriptor_;
}

const Game& Game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
  return *default_instance_;
}

Game* Game::default_instance_ = NULL;

Game* Game::New() const {
  return new Game;
}

void Game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_a_x_ = 0;
    player_a_y_ = 0;
    player_a_rotate_x_ = 0;
    player_a_rotate_y_ = 0;
    player_b_x_ = 0;
    player_b_y_ = 0;
    player_b_rotate_x_ = 0;
    player_b_rotate_y_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ball_x_ = 0;
    ball_y_ = 0;
    pole1_x_ = 0;
    pole1_y_ = 0;
    pole2_x_ = 0;
    pole2_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float player_a_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_a_x_)));
          set_has_player_a_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_player_a_y;
        break;
      }

      // required float player_a_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player_a_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_a_y_)));
          set_has_player_a_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_player_a_rotate_x;
        break;
      }

      // required float player_a_rotate_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player_a_rotate_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_a_rotate_x_)));
          set_has_player_a_rotate_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_player_a_rotate_y;
        break;
      }

      // required float player_a_rotate_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player_a_rotate_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_a_rotate_y_)));
          set_has_player_a_rotate_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_player_b_x;
        break;
      }

      // required float player_b_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player_b_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_b_x_)));
          set_has_player_b_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_player_b_y;
        break;
      }

      // required float player_b_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player_b_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_b_y_)));
          set_has_player_b_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_player_b_rotate_x;
        break;
      }

      // required float player_b_rotate_x = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player_b_rotate_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_b_rotate_x_)));
          set_has_player_b_rotate_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_player_b_rotate_y;
        break;
      }

      // required float player_b_rotate_y = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_player_b_rotate_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_b_rotate_y_)));
          set_has_player_b_rotate_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_ball_x;
        break;
      }

      // required float ball_x = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ball_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ball_x_)));
          set_has_ball_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_ball_y;
        break;
      }

      // required float ball_y = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ball_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ball_y_)));
          set_has_ball_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_pole1_x;
        break;
      }

      // required float pole1_x = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pole1_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pole1_x_)));
          set_has_pole1_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_pole1_y;
        break;
      }

      // required float pole1_y = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pole1_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pole1_y_)));
          set_has_pole1_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_pole2_x;
        break;
      }

      // required float pole2_x = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pole2_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pole2_x_)));
          set_has_pole2_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_pole2_y;
        break;
      }

      // required float pole2_y = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pole2_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pole2_y_)));
          set_has_pole2_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float player_a_x = 1;
  if (has_player_a_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->player_a_x(), output);
  }

  // required float player_a_y = 2;
  if (has_player_a_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->player_a_y(), output);
  }

  // required float player_a_rotate_x = 3;
  if (has_player_a_rotate_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->player_a_rotate_x(), output);
  }

  // required float player_a_rotate_y = 4;
  if (has_player_a_rotate_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->player_a_rotate_y(), output);
  }

  // required float player_b_x = 5;
  if (has_player_b_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->player_b_x(), output);
  }

  // required float player_b_y = 6;
  if (has_player_b_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->player_b_y(), output);
  }

  // required float player_b_rotate_x = 7;
  if (has_player_b_rotate_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->player_b_rotate_x(), output);
  }

  // required float player_b_rotate_y = 8;
  if (has_player_b_rotate_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->player_b_rotate_y(), output);
  }

  // required float ball_x = 9;
  if (has_ball_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->ball_x(), output);
  }

  // required float ball_y = 10;
  if (has_ball_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->ball_y(), output);
  }

  // required float pole1_x = 11;
  if (has_pole1_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->pole1_x(), output);
  }

  // required float pole1_y = 12;
  if (has_pole1_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pole1_y(), output);
  }

  // required float pole2_x = 13;
  if (has_pole2_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->pole2_x(), output);
  }

  // required float pole2_y = 14;
  if (has_pole2_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->pole2_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float player_a_x = 1;
  if (has_player_a_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->player_a_x(), target);
  }

  // required float player_a_y = 2;
  if (has_player_a_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->player_a_y(), target);
  }

  // required float player_a_rotate_x = 3;
  if (has_player_a_rotate_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->player_a_rotate_x(), target);
  }

  // required float player_a_rotate_y = 4;
  if (has_player_a_rotate_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->player_a_rotate_y(), target);
  }

  // required float player_b_x = 5;
  if (has_player_b_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->player_b_x(), target);
  }

  // required float player_b_y = 6;
  if (has_player_b_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->player_b_y(), target);
  }

  // required float player_b_rotate_x = 7;
  if (has_player_b_rotate_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->player_b_rotate_x(), target);
  }

  // required float player_b_rotate_y = 8;
  if (has_player_b_rotate_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->player_b_rotate_y(), target);
  }

  // required float ball_x = 9;
  if (has_ball_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->ball_x(), target);
  }

  // required float ball_y = 10;
  if (has_ball_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->ball_y(), target);
  }

  // required float pole1_x = 11;
  if (has_pole1_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->pole1_x(), target);
  }

  // required float pole1_y = 12;
  if (has_pole1_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pole1_y(), target);
  }

  // required float pole2_x = 13;
  if (has_pole2_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->pole2_x(), target);
  }

  // required float pole2_y = 14;
  if (has_pole2_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->pole2_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float player_a_x = 1;
    if (has_player_a_x()) {
      total_size += 1 + 4;
    }

    // required float player_a_y = 2;
    if (has_player_a_y()) {
      total_size += 1 + 4;
    }

    // required float player_a_rotate_x = 3;
    if (has_player_a_rotate_x()) {
      total_size += 1 + 4;
    }

    // required float player_a_rotate_y = 4;
    if (has_player_a_rotate_y()) {
      total_size += 1 + 4;
    }

    // required float player_b_x = 5;
    if (has_player_b_x()) {
      total_size += 1 + 4;
    }

    // required float player_b_y = 6;
    if (has_player_b_y()) {
      total_size += 1 + 4;
    }

    // required float player_b_rotate_x = 7;
    if (has_player_b_rotate_x()) {
      total_size += 1 + 4;
    }

    // required float player_b_rotate_y = 8;
    if (has_player_b_rotate_y()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float ball_x = 9;
    if (has_ball_x()) {
      total_size += 1 + 4;
    }

    // required float ball_y = 10;
    if (has_ball_y()) {
      total_size += 1 + 4;
    }

    // required float pole1_x = 11;
    if (has_pole1_x()) {
      total_size += 1 + 4;
    }

    // required float pole1_y = 12;
    if (has_pole1_y()) {
      total_size += 1 + 4;
    }

    // required float pole2_x = 13;
    if (has_pole2_x()) {
      total_size += 1 + 4;
    }

    // required float pole2_y = 14;
    if (has_pole2_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game::MergeFrom(const Game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_a_x()) {
      set_player_a_x(from.player_a_x());
    }
    if (from.has_player_a_y()) {
      set_player_a_y(from.player_a_y());
    }
    if (from.has_player_a_rotate_x()) {
      set_player_a_rotate_x(from.player_a_rotate_x());
    }
    if (from.has_player_a_rotate_y()) {
      set_player_a_rotate_y(from.player_a_rotate_y());
    }
    if (from.has_player_b_x()) {
      set_player_b_x(from.player_b_x());
    }
    if (from.has_player_b_y()) {
      set_player_b_y(from.player_b_y());
    }
    if (from.has_player_b_rotate_x()) {
      set_player_b_rotate_x(from.player_b_rotate_x());
    }
    if (from.has_player_b_rotate_y()) {
      set_player_b_rotate_y(from.player_b_rotate_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ball_x()) {
      set_ball_x(from.ball_x());
    }
    if (from.has_ball_y()) {
      set_ball_y(from.ball_y());
    }
    if (from.has_pole1_x()) {
      set_pole1_x(from.pole1_x());
    }
    if (from.has_pole1_y()) {
      set_pole1_y(from.pole1_y());
    }
    if (from.has_pole2_x()) {
      set_pole2_x(from.pole2_x());
    }
    if (from.has_pole2_y()) {
      set_pole2_y(from.pole2_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game::CopyFrom(const Game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void Game::Swap(Game* other) {
  if (other != this) {
    std::swap(player_a_x_, other->player_a_x_);
    std::swap(player_a_y_, other->player_a_y_);
    std::swap(player_a_rotate_x_, other->player_a_rotate_x_);
    std::swap(player_a_rotate_y_, other->player_a_rotate_y_);
    std::swap(player_b_x_, other->player_b_x_);
    std::swap(player_b_y_, other->player_b_y_);
    std::swap(player_b_rotate_x_, other->player_b_rotate_x_);
    std::swap(player_b_rotate_y_, other->player_b_rotate_y_);
    std::swap(ball_x_, other->ball_x_);
    std::swap(ball_y_, other->ball_y_);
    std::swap(pole1_x_, other->pole1_x_);
    std::swap(pole1_y_, other->pole1_y_);
    std::swap(pole2_x_, other->pole2_x_);
    std::swap(pole2_y_, other->pole2_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game_descriptor_;
  metadata.reflection = Game_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
