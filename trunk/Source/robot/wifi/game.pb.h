
// source: game.proto

#ifndef PROTOBUF_game_2eproto__INCLUDED
#define PROTOBUF_game_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_2eproto();
void protobuf_AssignDesc_game_2eproto();
void protobuf_ShutdownFile_game_2eproto();

class Game;

// ===================================================================

class Game : public ::google::protobuf::Message {
 public:
  Game();
  virtual ~Game();

  Game(const Game& from);

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game& default_instance();

  void Swap(Game* other);

  // implements Message ----------------------------------------------

  Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float player_a_x = 1;
  inline bool has_player_a_x() const;
  inline void clear_player_a_x();
  static const int kPlayerAXFieldNumber = 1;
  inline float player_a_x() const;
  inline void set_player_a_x(float value);

  // required float player_a_y = 2;
  inline bool has_player_a_y() const;
  inline void clear_player_a_y();
  static const int kPlayerAYFieldNumber = 2;
  inline float player_a_y() const;
  inline void set_player_a_y(float value);

  // required float player_a_rotate_x = 3;
  inline bool has_player_a_rotate_x() const;
  inline void clear_player_a_rotate_x();
  static const int kPlayerARotateXFieldNumber = 3;
  inline float player_a_rotate_x() const;
  inline void set_player_a_rotate_x(float value);

  // required float player_a_rotate_y = 4;
  inline bool has_player_a_rotate_y() const;
  inline void clear_player_a_rotate_y();
  static const int kPlayerARotateYFieldNumber = 4;
  inline float player_a_rotate_y() const;
  inline void set_player_a_rotate_y(float value);

  // required float player_b_x = 5;
  inline bool has_player_b_x() const;
  inline void clear_player_b_x();
  static const int kPlayerBXFieldNumber = 5;
  inline float player_b_x() const;
  inline void set_player_b_x(float value);

  // required float player_b_y = 6;
  inline bool has_player_b_y() const;
  inline void clear_player_b_y();
  static const int kPlayerBYFieldNumber = 6;
  inline float player_b_y() const;
  inline void set_player_b_y(float value);

  // required float player_b_rotate_x = 7;
  inline bool has_player_b_rotate_x() const;
  inline void clear_player_b_rotate_x();
  static const int kPlayerBRotateXFieldNumber = 7;
  inline float player_b_rotate_x() const;
  inline void set_player_b_rotate_x(float value);

  // required float player_b_rotate_y = 8;
  inline bool has_player_b_rotate_y() const;
  inline void clear_player_b_rotate_y();
  static const int kPlayerBRotateYFieldNumber = 8;
  inline float player_b_rotate_y() const;
  inline void set_player_b_rotate_y(float value);

  // required float ball_x = 9;
  inline bool has_ball_x() const;
  inline void clear_ball_x();
  static const int kBallXFieldNumber = 9;
  inline float ball_x() const;
  inline void set_ball_x(float value);

  // required float ball_y = 10;
  inline bool has_ball_y() const;
  inline void clear_ball_y();
  static const int kBallYFieldNumber = 10;
  inline float ball_y() const;
  inline void set_ball_y(float value);

  // required float pole1_x = 11;
  inline bool has_pole1_x() const;
  inline void clear_pole1_x();
  static const int kPole1XFieldNumber = 11;
  inline float pole1_x() const;
  inline void set_pole1_x(float value);

  // required float pole1_y = 12;
  inline bool has_pole1_y() const;
  inline void clear_pole1_y();
  static const int kPole1YFieldNumber = 12;
  inline float pole1_y() const;
  inline void set_pole1_y(float value);

  // required float pole2_x = 13;
  inline bool has_pole2_x() const;
  inline void clear_pole2_x();
  static const int kPole2XFieldNumber = 13;
  inline float pole2_x() const;
  inline void set_pole2_x(float value);

  // required float pole2_y = 14;
  inline bool has_pole2_y() const;
  inline void clear_pole2_y();
  static const int kPole2YFieldNumber = 14;
  inline float pole2_y() const;
  inline void set_pole2_y(float value);

  // @@protoc_insertion_point(class_scope:Game)
 private:
  inline void set_has_player_a_x();
  inline void clear_has_player_a_x();
  inline void set_has_player_a_y();
  inline void clear_has_player_a_y();
  inline void set_has_player_a_rotate_x();
  inline void clear_has_player_a_rotate_x();
  inline void set_has_player_a_rotate_y();
  inline void clear_has_player_a_rotate_y();
  inline void set_has_player_b_x();
  inline void clear_has_player_b_x();
  inline void set_has_player_b_y();
  inline void clear_has_player_b_y();
  inline void set_has_player_b_rotate_x();
  inline void clear_has_player_b_rotate_x();
  inline void set_has_player_b_rotate_y();
  inline void clear_has_player_b_rotate_y();
  inline void set_has_ball_x();
  inline void clear_has_ball_x();
  inline void set_has_ball_y();
  inline void clear_has_ball_y();
  inline void set_has_pole1_x();
  inline void clear_has_pole1_x();
  inline void set_has_pole1_y();
  inline void clear_has_pole1_y();
  inline void set_has_pole2_x();
  inline void clear_has_pole2_x();
  inline void set_has_pole2_y();
  inline void clear_has_pole2_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float player_a_x_;
  float player_a_y_;
  float player_a_rotate_x_;
  float player_a_rotate_y_;
  float player_b_x_;
  float player_b_y_;
  float player_b_rotate_x_;
  float player_b_rotate_y_;
  float ball_x_;
  float ball_y_;
  float pole1_x_;
  float pole1_y_;
  float pole2_x_;
  float pole2_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();

  void InitAsDefaultInstance();
  static Game* default_instance_;
};
// ===================================================================


// ===================================================================

// Game

// required float player_a_x = 1;
inline bool Game::has_player_a_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game::set_has_player_a_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game::clear_has_player_a_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game::clear_player_a_x() {
  player_a_x_ = 0;
  clear_has_player_a_x();
}
inline float Game::player_a_x() const {
  return player_a_x_;
}
inline void Game::set_player_a_x(float value) {
  set_has_player_a_x();
  player_a_x_ = value;
}

// required float player_a_y = 2;
inline bool Game::has_player_a_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game::set_has_player_a_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game::clear_has_player_a_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game::clear_player_a_y() {
  player_a_y_ = 0;
  clear_has_player_a_y();
}
inline float Game::player_a_y() const {
  return player_a_y_;
}
inline void Game::set_player_a_y(float value) {
  set_has_player_a_y();
  player_a_y_ = value;
}

// required float player_a_rotate_x = 3;
inline bool Game::has_player_a_rotate_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Game::set_has_player_a_rotate_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Game::clear_has_player_a_rotate_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Game::clear_player_a_rotate_x() {
  player_a_rotate_x_ = 0;
  clear_has_player_a_rotate_x();
}
inline float Game::player_a_rotate_x() const {
  return player_a_rotate_x_;
}
inline void Game::set_player_a_rotate_x(float value) {
  set_has_player_a_rotate_x();
  player_a_rotate_x_ = value;
}

// required float player_a_rotate_y = 4;
inline bool Game::has_player_a_rotate_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Game::set_has_player_a_rotate_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Game::clear_has_player_a_rotate_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Game::clear_player_a_rotate_y() {
  player_a_rotate_y_ = 0;
  clear_has_player_a_rotate_y();
}
inline float Game::player_a_rotate_y() const {
  return player_a_rotate_y_;
}
inline void Game::set_player_a_rotate_y(float value) {
  set_has_player_a_rotate_y();
  player_a_rotate_y_ = value;
}

// required float player_b_x = 5;
inline bool Game::has_player_b_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Game::set_has_player_b_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Game::clear_has_player_b_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Game::clear_player_b_x() {
  player_b_x_ = 0;
  clear_has_player_b_x();
}
inline float Game::player_b_x() const {
  return player_b_x_;
}
inline void Game::set_player_b_x(float value) {
  set_has_player_b_x();
  player_b_x_ = value;
}

// required float player_b_y = 6;
inline bool Game::has_player_b_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Game::set_has_player_b_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Game::clear_has_player_b_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Game::clear_player_b_y() {
  player_b_y_ = 0;
  clear_has_player_b_y();
}
inline float Game::player_b_y() const {
  return player_b_y_;
}
inline void Game::set_player_b_y(float value) {
  set_has_player_b_y();
  player_b_y_ = value;
}

// required float player_b_rotate_x = 7;
inline bool Game::has_player_b_rotate_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Game::set_has_player_b_rotate_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Game::clear_has_player_b_rotate_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Game::clear_player_b_rotate_x() {
  player_b_rotate_x_ = 0;
  clear_has_player_b_rotate_x();
}
inline float Game::player_b_rotate_x() const {
  return player_b_rotate_x_;
}
inline void Game::set_player_b_rotate_x(float value) {
  set_has_player_b_rotate_x();
  player_b_rotate_x_ = value;
}

// required float player_b_rotate_y = 8;
inline bool Game::has_player_b_rotate_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Game::set_has_player_b_rotate_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Game::clear_has_player_b_rotate_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Game::clear_player_b_rotate_y() {
  player_b_rotate_y_ = 0;
  clear_has_player_b_rotate_y();
}
inline float Game::player_b_rotate_y() const {
  return player_b_rotate_y_;
}
inline void Game::set_player_b_rotate_y(float value) {
  set_has_player_b_rotate_y();
  player_b_rotate_y_ = value;
}

// required float ball_x = 9;
inline bool Game::has_ball_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Game::set_has_ball_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Game::clear_has_ball_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Game::clear_ball_x() {
  ball_x_ = 0;
  clear_has_ball_x();
}
inline float Game::ball_x() const {
  return ball_x_;
}
inline void Game::set_ball_x(float value) {
  set_has_ball_x();
  ball_x_ = value;
}

// required float ball_y = 10;
inline bool Game::has_ball_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Game::set_has_ball_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Game::clear_has_ball_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Game::clear_ball_y() {
  ball_y_ = 0;
  clear_has_ball_y();
}
inline float Game::ball_y() const {
  return ball_y_;
}
inline void Game::set_ball_y(float value) {
  set_has_ball_y();
  ball_y_ = value;
}

// required float pole1_x = 11;
inline bool Game::has_pole1_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Game::set_has_pole1_x() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Game::clear_has_pole1_x() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Game::clear_pole1_x() {
  pole1_x_ = 0;
  clear_has_pole1_x();
}
inline float Game::pole1_x() const {
  return pole1_x_;
}
inline void Game::set_pole1_x(float value) {
  set_has_pole1_x();
  pole1_x_ = value;
}

// required float pole1_y = 12;
inline bool Game::has_pole1_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Game::set_has_pole1_y() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Game::clear_has_pole1_y() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Game::clear_pole1_y() {
  pole1_y_ = 0;
  clear_has_pole1_y();
}
inline float Game::pole1_y() const {
  return pole1_y_;
}
inline void Game::set_pole1_y(float value) {
  set_has_pole1_y();
  pole1_y_ = value;
}

// required float pole2_x = 13;
inline bool Game::has_pole2_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Game::set_has_pole2_x() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Game::clear_has_pole2_x() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Game::clear_pole2_x() {
  pole2_x_ = 0;
  clear_has_pole2_x();
}
inline float Game::pole2_x() const {
  return pole2_x_;
}
inline void Game::set_pole2_x(float value) {
  set_has_pole2_x();
  pole2_x_ = value;
}

// required float pole2_y = 14;
inline bool Game::has_pole2_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Game::set_has_pole2_y() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Game::clear_has_pole2_y() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Game::clear_pole2_y() {
  pole2_y_ = 0;
  clear_has_pole2_y();
}
inline float Game::pole2_y() const {
  return pole2_y_;
}
inline void Game::set_pole2_y(float value) {
  set_has_pole2_y();
  pole2_y_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_2eproto__INCLUDED
