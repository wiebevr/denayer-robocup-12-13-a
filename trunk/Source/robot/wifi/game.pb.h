// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef PROTOBUF_game_2eproto__INCLUDED
#define PROTOBUF_game_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_2eproto();
void protobuf_AssignDesc_game_2eproto();
void protobuf_ShutdownFile_game_2eproto();

class Robot;
class Ball;
class Goal;
class Game;

// ===================================================================

class Robot : public ::google::protobuf::Message {
 public:
  Robot();
  virtual ~Robot();
  
  Robot(const Robot& from);
  
  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot& default_instance();
  
  void Swap(Robot* other);
  
  // implements Message ----------------------------------------------
  
  Robot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float rotate_x = 3;
  inline bool has_rotate_x() const;
  inline void clear_rotate_x();
  static const int kRotateXFieldNumber = 3;
  inline float rotate_x() const;
  inline void set_rotate_x(float value);
  
  // required float rotate_y = 4;
  inline bool has_rotate_y() const;
  inline void clear_rotate_y();
  static const int kRotateYFieldNumber = 4;
  inline float rotate_y() const;
  inline void set_rotate_y(float value);
  
  // @@protoc_insertion_point(class_scope:Robot)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_rotate_x();
  inline void clear_has_rotate_x();
  inline void set_has_rotate_y();
  inline void clear_has_rotate_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float rotate_x_;
  float rotate_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();
  
  void InitAsDefaultInstance();
  static Robot* default_instance_;
};
// -------------------------------------------------------------------

class Ball : public ::google::protobuf::Message {
 public:
  Ball();
  virtual ~Ball();
  
  Ball(const Ball& from);
  
  inline Ball& operator=(const Ball& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ball& default_instance();
  
  void Swap(Ball* other);
  
  // implements Message ----------------------------------------------
  
  Ball* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ball& from);
  void MergeFrom(const Ball& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // @@protoc_insertion_point(class_scope:Ball)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();
  
  void InitAsDefaultInstance();
  static Ball* default_instance_;
};
// -------------------------------------------------------------------

class Goal : public ::google::protobuf::Message {
 public:
  Goal();
  virtual ~Goal();
  
  Goal(const Goal& from);
  
  inline Goal& operator=(const Goal& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Goal& default_instance();
  
  void Swap(Goal* other);
  
  // implements Message ----------------------------------------------
  
  Goal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Goal& from);
  void MergeFrom(const Goal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float pole1_x = 1;
  inline bool has_pole1_x() const;
  inline void clear_pole1_x();
  static const int kPole1XFieldNumber = 1;
  inline float pole1_x() const;
  inline void set_pole1_x(float value);
  
  // required float pole1_y = 2;
  inline bool has_pole1_y() const;
  inline void clear_pole1_y();
  static const int kPole1YFieldNumber = 2;
  inline float pole1_y() const;
  inline void set_pole1_y(float value);
  
  // required float pole2_x = 3;
  inline bool has_pole2_x() const;
  inline void clear_pole2_x();
  static const int kPole2XFieldNumber = 3;
  inline float pole2_x() const;
  inline void set_pole2_x(float value);
  
  // required float pole2_y = 4;
  inline bool has_pole2_y() const;
  inline void clear_pole2_y();
  static const int kPole2YFieldNumber = 4;
  inline float pole2_y() const;
  inline void set_pole2_y(float value);
  
  // @@protoc_insertion_point(class_scope:Goal)
 private:
  inline void set_has_pole1_x();
  inline void clear_has_pole1_x();
  inline void set_has_pole1_y();
  inline void clear_has_pole1_y();
  inline void set_has_pole2_x();
  inline void clear_has_pole2_x();
  inline void set_has_pole2_y();
  inline void clear_has_pole2_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float pole1_x_;
  float pole1_y_;
  float pole2_x_;
  float pole2_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();
  
  void InitAsDefaultInstance();
  static Goal* default_instance_;
};
// -------------------------------------------------------------------

class Game : public ::google::protobuf::Message {
 public:
  Game();
  virtual ~Game();
  
  Game(const Game& from);
  
  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Game& default_instance();
  
  void Swap(Game* other);
  
  // implements Message ----------------------------------------------
  
  Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Robot robot_a = 1;
  inline int robot_a_size() const;
  inline void clear_robot_a();
  static const int kRobotAFieldNumber = 1;
  inline const ::Robot& robot_a(int index) const;
  inline ::Robot* mutable_robot_a(int index);
  inline ::Robot* add_robot_a();
  inline const ::google::protobuf::RepeatedPtrField< ::Robot >&
      robot_a() const;
  inline ::google::protobuf::RepeatedPtrField< ::Robot >*
      mutable_robot_a();
  
  // repeated .Robot robot_b = 2;
  inline int robot_b_size() const;
  inline void clear_robot_b();
  static const int kRobotBFieldNumber = 2;
  inline const ::Robot& robot_b(int index) const;
  inline ::Robot* mutable_robot_b(int index);
  inline ::Robot* add_robot_b();
  inline const ::google::protobuf::RepeatedPtrField< ::Robot >&
      robot_b() const;
  inline ::google::protobuf::RepeatedPtrField< ::Robot >*
      mutable_robot_b();
  
  // repeated .Ball ball = 3;
  inline int ball_size() const;
  inline void clear_ball();
  static const int kBallFieldNumber = 3;
  inline const ::Ball& ball(int index) const;
  inline ::Ball* mutable_ball(int index);
  inline ::Ball* add_ball();
  inline const ::google::protobuf::RepeatedPtrField< ::Ball >&
      ball() const;
  inline ::google::protobuf::RepeatedPtrField< ::Ball >*
      mutable_ball();
  
  // repeated .Goal goal = 4;
  inline int goal_size() const;
  inline void clear_goal();
  static const int kGoalFieldNumber = 4;
  inline const ::Goal& goal(int index) const;
  inline ::Goal* mutable_goal(int index);
  inline ::Goal* add_goal();
  inline const ::google::protobuf::RepeatedPtrField< ::Goal >&
      goal() const;
  inline ::google::protobuf::RepeatedPtrField< ::Goal >*
      mutable_goal();
  
  // @@protoc_insertion_point(class_scope:Game)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Robot > robot_a_;
  ::google::protobuf::RepeatedPtrField< ::Robot > robot_b_;
  ::google::protobuf::RepeatedPtrField< ::Ball > ball_;
  ::google::protobuf::RepeatedPtrField< ::Goal > goal_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_2eproto();
  friend void protobuf_AssignDesc_game_2eproto();
  friend void protobuf_ShutdownFile_game_2eproto();
  
  void InitAsDefaultInstance();
  static Game* default_instance_;
};
// ===================================================================


// ===================================================================

// Robot

// required float x = 1;
inline bool Robot::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robot::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Robot::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Robot::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Robot::x() const {
  return x_;
}
inline void Robot::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Robot::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robot::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robot::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Robot::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Robot::y() const {
  return y_;
}
inline void Robot::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float rotate_x = 3;
inline bool Robot::has_rotate_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Robot::set_has_rotate_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Robot::clear_has_rotate_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Robot::clear_rotate_x() {
  rotate_x_ = 0;
  clear_has_rotate_x();
}
inline float Robot::rotate_x() const {
  return rotate_x_;
}
inline void Robot::set_rotate_x(float value) {
  set_has_rotate_x();
  rotate_x_ = value;
}

// required float rotate_y = 4;
inline bool Robot::has_rotate_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Robot::set_has_rotate_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Robot::clear_has_rotate_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Robot::clear_rotate_y() {
  rotate_y_ = 0;
  clear_has_rotate_y();
}
inline float Robot::rotate_y() const {
  return rotate_y_;
}
inline void Robot::set_rotate_y(float value) {
  set_has_rotate_y();
  rotate_y_ = value;
}

// -------------------------------------------------------------------

// Ball

// required float x = 1;
inline bool Ball::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ball::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ball::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ball::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Ball::x() const {
  return x_;
}
inline void Ball::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Ball::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ball::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ball::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ball::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Ball::y() const {
  return y_;
}
inline void Ball::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Goal

// required float pole1_x = 1;
inline bool Goal::has_pole1_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Goal::set_has_pole1_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Goal::clear_has_pole1_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Goal::clear_pole1_x() {
  pole1_x_ = 0;
  clear_has_pole1_x();
}
inline float Goal::pole1_x() const {
  return pole1_x_;
}
inline void Goal::set_pole1_x(float value) {
  set_has_pole1_x();
  pole1_x_ = value;
}

// required float pole1_y = 2;
inline bool Goal::has_pole1_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Goal::set_has_pole1_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Goal::clear_has_pole1_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Goal::clear_pole1_y() {
  pole1_y_ = 0;
  clear_has_pole1_y();
}
inline float Goal::pole1_y() const {
  return pole1_y_;
}
inline void Goal::set_pole1_y(float value) {
  set_has_pole1_y();
  pole1_y_ = value;
}

// required float pole2_x = 3;
inline bool Goal::has_pole2_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Goal::set_has_pole2_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Goal::clear_has_pole2_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Goal::clear_pole2_x() {
  pole2_x_ = 0;
  clear_has_pole2_x();
}
inline float Goal::pole2_x() const {
  return pole2_x_;
}
inline void Goal::set_pole2_x(float value) {
  set_has_pole2_x();
  pole2_x_ = value;
}

// required float pole2_y = 4;
inline bool Goal::has_pole2_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Goal::set_has_pole2_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Goal::clear_has_pole2_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Goal::clear_pole2_y() {
  pole2_y_ = 0;
  clear_has_pole2_y();
}
inline float Goal::pole2_y() const {
  return pole2_y_;
}
inline void Goal::set_pole2_y(float value) {
  set_has_pole2_y();
  pole2_y_ = value;
}

// -------------------------------------------------------------------

// Game

// repeated .Robot robot_a = 1;
inline int Game::robot_a_size() const {
  return robot_a_.size();
}
inline void Game::clear_robot_a() {
  robot_a_.Clear();
}
inline const ::Robot& Game::robot_a(int index) const {
  return robot_a_.Get(index);
}
inline ::Robot* Game::mutable_robot_a(int index) {
  return robot_a_.Mutable(index);
}
inline ::Robot* Game::add_robot_a() {
  return robot_a_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Robot >&
Game::robot_a() const {
  return robot_a_;
}
inline ::google::protobuf::RepeatedPtrField< ::Robot >*
Game::mutable_robot_a() {
  return &robot_a_;
}

// repeated .Robot robot_b = 2;
inline int Game::robot_b_size() const {
  return robot_b_.size();
}
inline void Game::clear_robot_b() {
  robot_b_.Clear();
}
inline const ::Robot& Game::robot_b(int index) const {
  return robot_b_.Get(index);
}
inline ::Robot* Game::mutable_robot_b(int index) {
  return robot_b_.Mutable(index);
}
inline ::Robot* Game::add_robot_b() {
  return robot_b_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Robot >&
Game::robot_b() const {
  return robot_b_;
}
inline ::google::protobuf::RepeatedPtrField< ::Robot >*
Game::mutable_robot_b() {
  return &robot_b_;
}

// repeated .Ball ball = 3;
inline int Game::ball_size() const {
  return ball_.size();
}
inline void Game::clear_ball() {
  ball_.Clear();
}
inline const ::Ball& Game::ball(int index) const {
  return ball_.Get(index);
}
inline ::Ball* Game::mutable_ball(int index) {
  return ball_.Mutable(index);
}
inline ::Ball* Game::add_ball() {
  return ball_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Ball >&
Game::ball() const {
  return ball_;
}
inline ::google::protobuf::RepeatedPtrField< ::Ball >*
Game::mutable_ball() {
  return &ball_;
}

// repeated .Goal goal = 4;
inline int Game::goal_size() const {
  return goal_.size();
}
inline void Game::clear_goal() {
  goal_.Clear();
}
inline const ::Goal& Game::goal(int index) const {
  return goal_.Get(index);
}
inline ::Goal* Game::mutable_goal(int index) {
  return goal_.Mutable(index);
}
inline ::Goal* Game::add_goal() {
  return goal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Goal >&
Game::goal() const {
  return goal_;
}
inline ::google::protobuf::RepeatedPtrField< ::Goal >*
Game::mutable_goal() {
  return &goal_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_2eproto__INCLUDED
