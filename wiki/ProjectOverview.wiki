#summary Project Overview
||<wiki:toc max_depth="2" />||

= Introduction =

For our course in Smart Embedded Systems at Lessius Mechelen Campus De Nayer, we have to create a Robocup SSL-project. The goal of this project is to create an autonomous robot, that can play a simplified version of soccer.

= Architecture =

The total architecture of this project is divided into 4 subsystems. First, the Image Processing-unit will process the images received by the camera. Then, the Wifi-unit will send the information from the local computer to the robot over Wifi. Afterwards, the Strategy-unit provides a strategy on what the robot should do. And finally, the Low Level Communication-unit will control the wheels of the robot. Every unit is explained more detailed underneath.

= Modules =
== Image Processing (IP-unit) ==
        ||see [ImageProcessingIndex Image Processing] for the routines and internal architecture||

A camera positioned above the field provides images to the central computer at a framerate of 4fps. These images are processed by the IP-unit. 

[File:"C:\\Documents and Settings\Student\Mijn documenten\robocup\afbeelding.jpg"|thumb|center|alt=image|Example of an image sent by the camera.]

Out of these images, the coördinates of each object on the field will be calculated. With the field being green, the ball being orange, and a pattern present on the robot, the most logical technique to use, is Color Segmentation.

Now that the coördinates are known, they have to be send to the robot. The coördinates are delivered to the WIFI-unit.




Short description^(1)^

== Wifi Communication ==
        ||see [WifiIndex Wifi Communication]||
Short description

== Strategy ==
        ||see [StrategyIndex Strategy]||
Short description

== Low-level Communication ==
        ||see [LowLevelIndex Low-level Communication]||
Short description

= Technologies and Frameworks =
== Cross compileren ==
Het maken van een executable dat draait op het beagle board gebeurt als volgt:
 * Ga naar de map `Source/robot/env/` in deze map staat een script `set_me_up.sh`, dit script zal de omgeving (libraries, cross compiler ..) downloaden en uitpakken in de map env.
 * Hierna moet cmake als volgt uitgevoerd worden:
   * In de map build:
{{{
cmake -DCMAKE_TOOLCHAIN_FILE=../toolchain-bb.cmake ..
}}}
  Dit laad de toolchain file toolchain-bb.cmake waarin alle opties voor cmake en de compiler staan ingesteld.
 * Daarna moet enkel nog `make` uitgevoerd worden en de arm executables staan klaar in het build/bin folder.

= References =
List of references

 ^(1)^ Ref 1<br/>
 ^(2)^ Ref 2<br/>
 ^(3)^ Ref 3<br/>